{"version":3,"sources":["Heading.js","UsersList.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","text","UsersList","listItems","usersList","map","name","index","key","onClick","deleteUser","className","Users","addUser","e","preventDefault","console","log","userInput","value","setState","prevState","users","removeUser","indexToDelete","filterredArray","state","filter","elem","onSubmit","this","type","placeholder","ref","input","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAMeA,EAJC,SAACC,GACb,OAAO,4BAAKA,EAAMC,OCYPC,EAbG,SAACF,GAEf,IAAMG,EAAYH,EAAMI,UAAUC,KAAI,SAACC,EAAMC,GAAP,OACtC,wBAAIC,IAAKD,EAAOE,QAAS,kBAAIT,EAAMU,WAAWH,KAASD,MAGvD,OACI,wBAAIK,UAAU,cACTR,IC0CES,E,YA7CX,aAAe,IAAD,8BACV,+CAOJC,QAAU,SAACC,GACPA,EAAEC,iBACFC,QAAQC,IAAI,EAAKC,UAAUC,OAE3B,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,MAAM,GAAD,mBAAMD,EAAUC,OAAhB,CAAuB,EAAKJ,UAAUC,aAb7C,EAkBdI,WAAa,SAACC,GAEV,IAAIC,EAAiB,EAAKC,MAAMJ,MAAMK,QAAO,SAACC,EAAMrB,GAChD,OAAOA,IAAUiB,KAErBR,QAAQC,IAAIQ,GAEZ,EAAKL,SAAS,CAACE,MAAOG,KAvBtB,EAAKC,MAAQ,CACTJ,MAAO,CAAC,OAAQ,OAAQ,QAAS,UAH3B,E,sEA4BH,IAAD,OAEN,OACI,yBAAKX,UAAU,SACX,kBAAC,EAAD,CAASV,KAAK,gBAEd,0BAAMU,UAAU,gBAAgBkB,SAAUC,KAAKjB,SAC3C,2BAAOkB,KAAK,OAAOC,YAAY,oBAAoBC,IAAK,SAAAC,GAAK,OAAE,EAAKhB,UAAYgB,KAChF,6CAGJ,kBAAC,EAAD,CAAW9B,UAAW0B,KAAKJ,MAAMJ,MAAOZ,WAAYoB,KAAKP,kB,GAzCrDY,aCOLC,MARf,WACE,OACE,yBAAKzB,UAAU,OACd,kBAAC,EAAD,QCKe0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.af9ce13e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Heading = (props) => {\n    return <h1>{props.text}</h1>;\n}\n\nexport default Heading;","import React from 'react';\n\nconst UsersList = (props) => {\n\n    const listItems = props.usersList.map((name, index) =>\n    <li key={index} onClick={()=>props.deleteUser(index)}>{name}</li>\n    );\n\n    return (\n        <ul className=\"users-list\">\n            {listItems}\n        </ul>\n        )\n}\n\nexport default UsersList;","import React, {Component} from 'react';\n\nimport Heading from './Heading';\nimport UsersList from './UsersList';\n\nclass Users extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            users: ['Adam', 'Olga', 'Kasia', 'Basia']\n        }\n    }\n\n\n    addUser = (e) => {\n        e.preventDefault();\n        console.log(this.userInput.value);\n        \n        this.setState(prevState=>{\n            return({users: [...prevState.users, this.userInput.value]});\n        });\n\n    }\n\n    removeUser = (indexToDelete) => {\n        \n        let filterredArray = this.state.users.filter((elem, index)=>{\n            return index !== indexToDelete;\n        });\n        console.log(filterredArray);\n        \n        this.setState({users: filterredArray});\n    }\n\n    render () {\n        \n        return (\n            <div className=\"users\">\n                <Heading text=\"User's list\"/>\n                \n                <form className=\"add-user-form\" onSubmit={this.addUser}>\n                    <input type=\"text\" placeholder=\"Nazwa uzytkownika\" ref={input=>this.userInput = input} />\n                    <button>Add user</button>\n                </form>\n\n                <UsersList usersList={this.state.users} deleteUser={this.removeUser}/>\n            </div>\n        );\n    };\n}\n\nexport default Users;","import React from 'react';\nimport './App.css';\nimport Users from './Users';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Users />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}